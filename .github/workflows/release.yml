name: Release

on:
  push:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - develop
      skip_tests:
        description: 'Skip tests before release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Test before releasing - reuse existing CI strategy
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting
        run: |
          make lint
      - name: Run formatting
        run: |
          make format
      - name: Run tests
        run: |
          make test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
#    if: ${{ !inputs.skip_tests && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run integration tests
        env:
          LABELLERR_API_KEY: ${{ secrets.LABELLERR_API_KEY }}
          LABELLERR_API_SECRET: ${{ secrets.LABELLERR_API_SECRET }}
          LABELLERR_CLIENT_ID: ${{ secrets.LABELLERR_CLIENT_ID }}
          LABELLERR_TEST_EMAIL: ${{ secrets.LABELLERR_TEST_EMAIL }}
        run: |
          make run-integration-test

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    # if: always() && github.ref == 'refs/heads/main' && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.integration-test.result == 'success' || needs.integration-test.result == 'skipped')
    permissions:
      contents: write
      pull-requests: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      ticket: ${{ steps.ticket.outputs.ticket }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install packaging

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Extract ticket from commit or branch
        id: ticket
        run: |
          # Extract LABIMP ticket from latest commit message or branch name
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          TICKET=$(echo "$COMMIT_MSG" | grep -oE 'LABIMP-[0-9]+' | head -1 || echo "")
          if [ -z "$TICKET" ]; then
            TICKET=$(echo "${{ github.head_ref || github.ref_name }}" | grep -oE 'LABIMP-[0-9]+' | head -1 || echo "RELEASE")
          fi
          echo "ticket=$TICKET" >> $GITHUB_OUTPUT
          echo "Found ticket: $TICKET"

      - name: Determine semantic version bump
        id: bump_type
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"%s")

          # Check for breaking changes
          if echo "$COMMITS" | grep -qi "BREAKING CHANGE\|!:"; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "reason=breaking change detected" >> $GITHUB_OUTPUT
          # Check for features
          elif echo "$COMMITS" | grep -qi "^feat"; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "reason=new feature detected" >> $GITHUB_OUTPUT
          # Check for fixes
          elif echo "$COMMITS" | grep -qi "^fix"; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "reason=bug fix detected" >> $GITHUB_OUTPUT
          # Default to patch for other commits
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "reason=default patch increment" >> $GITHUB_OUTPUT
          fi

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "current=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        run: |
          BUMP_TYPE=${{ steps.bump_type.outputs.type }}
          CURRENT_VERSION=${{ steps.current_version.outputs.current }}

          # Parse current version
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Calculate new version based on semantic rules
          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac

          echo "Bumping from $CURRENT_VERSION to $NEW_VERSION ($BUMP_TYPE: ${{ steps.bump_type.outputs.reason }})"

          # Update pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Commit and tag
          git add pyproject.toml
          git commit -m "[${{ steps.ticket.outputs.ticket }}] Release v$NEW_VERSION

          Semantic version bump: $BUMP_TYPE
          Reason: ${{ steps.bump_type.outputs.reason }}
          Previous version: $CURRENT_VERSION"

          git tag -a "v$NEW_VERSION" -m "[${{ steps.ticket.outputs.ticket }}] Release v$NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        run: |
          git push origin ${{ github.ref_name }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: '[${{ steps.ticket.outputs.ticket }}] Release ${{ steps.version.outputs.tag }}'
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/develop' }}
          generate_release_notes: true
          body: |
            ## [${{ steps.ticket.outputs.ticket }}] Changes in ${{ steps.version.outputs.tag }}

            ### What's Changed
            - Automated release from `${{ github.ref_name }}` branch
            - Version bumped from `${{ steps.current_version.outputs.current }}` to `${{ steps.version.outputs.version }}`

            ### Branch Strategy
            - **Main branch** releases are production-ready patches
            - **Develop branch** releases are pre-release minor versions for testing

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.release.outputs.version }}
          path: dist/*
          retention-days: 90

  notify:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [release, build]
    if: always()

    steps:
      - name: Release Success
        if: needs.release.result == 'success' && needs.build.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.release.outputs.version }} completed successfully!"
          echo "üì¶ Package built and artifacts uploaded"
          echo "üè∑Ô∏è Git tag: ${{ needs.release.outputs.tag }}"
          echo "üìã Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}"

      - name: Release Failed
        if: needs.release.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Release job: ${{ needs.release.result }}"
          echo "Build job: ${{ needs.build.result }}"
          exit 1